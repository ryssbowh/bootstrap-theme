{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./assets/src/cp.js","webpack:///./assets/src/cp/js/fieldDisplayers.js","webpack:///./assets/src/cp/js/blocks.js"],"names":["document","addEventListener","e","detail","props","displayer","Object","options","errors","emits","template","computed","mapState","block","mounted","$nextTick","Craft","initUiElements","$el","$","find","on","test","target","hasClass","$emit"],"mappings":";QAAA;QACA;QACA;QACA;QACA;;QAEA;QACA;QACA;QACA,QAAQ,oBAAoB;QAC5B;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA,iBAAiB,4BAA4B;QAC7C;QACA;QACA,kBAAkB,2BAA2B;QAC7C;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;;QAEA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;QAEA;QACA;QACA;QACA;QACA,gBAAgB,uBAAuB;QACvC;;;QAGA;QACA;QACA;QACA;;;;;;;;;;;;;ACvJA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;ACVAA,QAAQ,CAACC,gBAAT,CAA0B,sCAA1B,EAAkE,UAASC,CAAT,EAAY;AAC1EA,GAAC,CAACC,MAAF,CAAS,gBAAT,IAA6B;AACzBC,SAAK,EAAE;AACHC,eAAS,EAAEC,MADR;AAEHC,aAAO,EAAED,MAFN;AAGHE,YAAM,EAAEF;AAHL,KADkB;AAMzBG,SAAK,EAAE,CAAC,eAAD,CANkB;AAOzBC,YAAQ;AAPiB,GAA7B;AAkGH,CAnGD,E;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AAEAV,QAAQ,CAACC,gBAAT,CAA0B,kCAA1B,EAA8D,UAASC,CAAT,EAAY;AACtEA,GAAC,CAACC,MAAF,CAAS,uBAAT,IAAoC;AAChCQ,YAAQ,oBACDC,sDAAQ,CAAC,CAAC,aAAD,CAAD,CADP,CADwB;AAIhCR,SAAK,EAAE;AACHS,WAAK,EAAEP,MADJ;AAEHE,YAAM,EAAEF;AAFL,KAJyB;AAQhCQ,WAAO,EAAE,mBAAY;AAAA;;AACjB,WAAKC,SAAL,CAAe,YAAM;AACjBC,aAAK,CAACC,cAAN,CAAqB,KAAI,CAACC,GAA1B;AACAC,SAAC,CAAC,KAAI,CAACD,GAAN,CAAD,CAAYE,IAAZ,CAAiB,cAAjB,EAAiCC,EAAjC,CAAoC,QAApC,EAA8C,UAACnB,CAAD,EAAO;AACjD,cAAIK,OAAO,GAAG;AACVe,gBAAI,EAAEH,CAAC,CAACjB,CAAC,CAACqB,MAAH,CAAD,CAAYC,QAAZ,CAAqB,IAArB;AADI,WAAd;;AAGA,eAAI,CAACC,KAAL,CAAW,eAAX,EAA4BlB,OAA5B;AACH,SALD;AAMH,OARD;AASH,KAlB+B;AAmBhCG,YAAQ,slBAnBwB;AAiChCD,SAAK,EAAE,CAAC,eAAD;AAjCyB,GAApC;AAmCH,CApCD,E","file":"cp.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t\"cp\": 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([\"fNpb\",\"vendor~cp\"]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","/**\n * Import here any npm modules and your own js/scss\n * You can import npm modules as css, scss or js\n */\n\n/**************\n * Javascript\n **************/\n\n//App\nimport './cp/js/blocks.js';\nimport './cp/js/fieldDisplayers.js';\n","document.addEventListener(\"register-field-displayers-components\", function(e) {\n    e.detail['asset_carousel'] = {\n        props: {\n            displayer: Object,\n            options: Object,\n            errors: Object\n        },\n        emits: ['updateOptions'],\n        template: `\n        <div>\n            <div class=\"field\" v-for=\"elem, volumeUid in displayer.viewModes\">\n                <div class=\"heading\">\n                    <label class=\"required\">{{ t('View mode for volume {volume}', {volume: elem.label}) }}</label>\n                </div>\n                <div class=\"input ltr\">                    \n                    <div class=\"select\">\n                        <select v-model=\"options.viewModes[volumeUid]\" @change=\"$emit('updateOptions', {viewModes: options.viewModes})\">\n                            <option v-for=\"label, uid in elem.viewModes\" :value=\"uid\">{{ label }}</option>\n                        </select>\n                    </div>\n                </div>\n                <ul class=\"errors\" v-if=\"errors['viewMode-'+volumeUid]\">\n                    <li v-for=\"error in errors['viewMode-'+volumeUid]\">{{ error }}</li>\n                </ul>\n            </div>\n            <div class=\"field\" v-if=\"displayer.viewModes.length == 0\">\n                <div class=\"warning with-icon\">\n                    {{ t(\"It seems this field doesn't have any valid source\") }}\n                </div>\n            </div>\n            <div class=\"field\">\n                <div class=\"heading\">\n                    <label>{{ t('Show controls', {}, 'bootstrap-theme') }}</label>\n                </div>\n                <lightswitch :on=\"options.showControls\" @change=\"$emit('updateOptions', {showControls: $event})\">\n                </lightswitch>\n            </div>\n            <div class=\"field\">\n                <div class=\"heading\">\n                    <label>{{ t('Show indicators', {}, 'bootstrap-theme') }}</label>\n                </div>\n                <lightswitch :on=\"options.showIndicators\" @change=\"$emit('updateOptions', {showIndicators: $event})\">\n                </lightswitch>\n            </div>\n            <div class=\"field\">\n                <div class=\"heading\">\n                    <label>{{ t('Disable touch swipe', {}, 'bootstrap-theme') }}</label>\n                </div>\n                <lightswitch :on=\"options.disableTouch\" @change=\"$emit('updateOptions', {disableTouch: $event})\">\n                </lightswitch>\n            </div>\n            <div class=\"field\">\n                <div class=\"heading\">\n                    <label>{{ t('Fade instead of slide', {}, 'bootstrap-theme') }}</label>\n                </div>\n                <lightswitch :on=\"options.fadeAnimation\" @change=\"$emit('updateOptions', {fadeAnimation: $event})\">\n                </lightswitch>\n            </div>\n            <div class=\"field\">\n                <div class=\"heading\">\n                    <label>{{ t('Autostart cycling', {}, 'bootstrap-theme') }}</label>\n                </div>\n                <lightswitch :on=\"options.autoStart\" @change=\"$emit('updateOptions', {autoStart: $event})\">\n                </lightswitch>\n            </div>\n            <div class=\"field\">\n                <div class=\"heading\">\n                    <label>{{ t('Pause on hover', {}, 'bootstrap-theme') }}</label>\n                </div>\n                <lightswitch :on=\"options.pause\" @change=\"$emit('updateOptions', {pause: $event})\">\n                </lightswitch>\n            </div>\n            <div class=\"field\">\n                <div class=\"heading\">\n                    <label>{{ t('Infinite', {}, 'bootstrap-theme') }}</label>\n                </div>\n                <lightswitch :on=\"options.infinite\" @change=\"$emit('updateOptions', {infinite: $event})\">\n                </lightswitch>\n            </div>\n            <div class=\"field\">\n                <div class=\"heading\">\n                    <label>{{ t('Disable keyboard', {}, 'bootstrap-theme') }}</label>\n                </div>\n                <lightswitch :on=\"options.disableKeyboard\" @change=\"$emit('updateOptions', {disableKeyboard: $event})\">\n                </lightswitch>\n            </div>\n            <div class=\"field\">\n                <div class=\"heading\">\n                    <label>{{ t('Interval between each slide (ms)', {}, 'bootstrap-theme') }}</label>\n                </div>\n                <div class=\"input ltr\">\n                    <input type=\"number\" class=\"fullwidth text\" @input=\"$emit('updateOptions', {interval: $event.target.value})\" min=\"100\" step=\"100\" :value=\"options.interval\">\n                </div>\n                <ul class=\"errors\" v-if=\"errors.interval\">\n                    <li v-for=\"error in errors.interval\">{{ error }}</li>\n                </ul>\n            </div>\n        </div>`\n    };\n});\n","import { mapState } from 'vuex';\n\ndocument.addEventListener(\"register-block-option-components\", function(e) {\n    e.detail['bootstrap-footer-menu'] = {\n        computed: {\n            ...mapState(['editedBlock'])\n        },\n        props: {\n            block: Object,\n            errors: Object\n        },\n        mounted: function () {\n            this.$nextTick(() => {\n                Craft.initUiElements(this.$el);\n                $(this.$el).find('.lightswitch').on('change', (e) => {\n                    let options = {\n                        test: $(e.target).hasClass('on')\n                    };\n                    this.$emit('updateOptions', options);\n                });\n            });\n        },\n        template: `\n        <div class=\"field\">\n            <div class=\"heading\">\n                <label>{{ t('Test') }}</label>\n            </div>\n            <div class=\"input ltr\">                    \n                <button type=\"button\" :class=\"{lightswitch: true, on: block.options.test}\">\n                    <div class=\"lightswitch-container\">\n                        <div class=\"handle\"></div>\n                    </div>\n                    <input type=\"hidden\" name=\"test\" :value=\"block.options.test ? 1 : ''\">\n                </button>\n            </div>\n        </div>`,\n        emits: ['updateOptions']\n    };\n});"],"sourceRoot":""}